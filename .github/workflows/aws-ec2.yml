name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      # Step 1
      - uses: actions/checkout@v2
      # Step 2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      # Step 2.1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      # step 3 maven缓存，不加的话每次都会去重新拉取，会影响速度
      - name: Dependies Cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      # Step 4
      - name: Build Application
        run: mvn clean package -Dmaven.test.skip=true
      # Step 5
      - name: view directory files
        run: ls -la ./rwws-admin/target # 查看打包后的目录文件
      # Step 6
      #      - name: Upload JAR
      #        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
      #        #This will occupy the storage of project.
      #        uses: actions/upload-artifact@v2
      #        with:
      #          #Set artifact name
      #          name: artifact
      #          #From this path
      #          path: rwws-admin/target/rwws-admin.jar
      # Step 7
      - name: Upload Artifact to s3
        working-directory: ./rwws-admin/target
        run: aws s3 cp *.jar s3://${{ secrets.S3BUCKET }}/

  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [ continuous-integration ]
    if: github.ref == 'refs/heads/main'
    steps:
      # Step 1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      # Step 2
      - name: Create CodeDeploy Deployment
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name Git_Application \
            --deployment-group-name development_group \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
